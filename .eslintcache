[{"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\firebase.js":"1","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\Header.jsx":"2","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\index.js":"3","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\reducers\\index.js":"4","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\admin\\AdminPosts.jsx":"5","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\admin\\AdminMenu.jsx":"6","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\LatestPosts.jsx":"7","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\Posts.jsx":"8","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\admin\\PostContentForm.jsx":"9","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\actions\\posts.actions.js":"10","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\selectors\\index.js":"11","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\actions\\actions.types.js":"12"},{"size":743,"mtime":1608057971903,"results":"13","hashOfConfig":"14"},{"size":2614,"mtime":1608547480089,"results":"15","hashOfConfig":"14"},{"size":351,"mtime":1608070508220,"results":"16","hashOfConfig":"14"},{"size":156,"mtime":1607338563014,"results":"17","hashOfConfig":"14"},{"size":6744,"mtime":1608405006549,"results":"18","hashOfConfig":"14"},{"size":1017,"mtime":1608058627789,"results":"19","hashOfConfig":"14"},{"size":2936,"mtime":1608594988876,"results":"20","hashOfConfig":"14"},{"size":2634,"mtime":1608595492648,"results":"21","hashOfConfig":"14"},{"size":6855,"mtime":1608480993861,"results":"22","hashOfConfig":"14"},{"size":1289,"mtime":1608074821788,"results":"23","hashOfConfig":"14"},{"size":74,"mtime":1607252723518,"results":"24","hashOfConfig":"14"},{"size":160,"mtime":1607879992302,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6k9swz",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\firebase.js",[],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\Header.jsx",["55"],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\index.js",[],["56","57"],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\admin\\AdminPosts.jsx",["58","59","60","61"],"import React, { useState } from 'react';\r\nimport '../../styles/adminPosts.css';\r\nimport { deletePostAction } from '../../store/actions/posts.actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {Button} from '@material-ui/core';\r\n\r\nexport const AdminPosts = ({ allPosts, handleEdit }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [ msg, setMsg ] = useState('')\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n      flexWrap: 'nowrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n      color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n      background:\r\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleDelete = (post) => {\r\n    setMsg('Post Deleted!')\r\n    dispatch(deletePostAction(post))\r\n    handleClick()\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className=\"admin-posts\">\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        message={msg}\r\n        action={\r\n          <React.Fragment>\r\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n              UNDO\r\n            </Button>\r\n            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n              <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n      <div className=\"beauty_posts\">\r\n        <h1>BEAUTY POSTS...</h1>\r\n        <div className={classes.root}>\r\n          <GridList className={classes.gridList} cols={2.5}>\r\n            {allPosts.map((item) => {\r\n              if(item.catagory === 'beauty') {\r\n                return (\r\n                  <GridListTile key={item.image}>\r\n                    <img src={item.image} alt={item.title} />\r\n                    <GridListTileBar\r\n                      title={item.title}\r\n                      actionIcon={\r\n                        <IconButton aria-label={`star ${item.title}`} id=\"actions-btns\">\r\n                          <DeleteIcon onClick={() => handleDelete(item)} className={classes.title} />\r\n                          <EditIcon onClick={() => handleEdit(item)} className={classes.title} />\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                )\r\n              }\r\n            }\r\n            )}\r\n          </GridList>\r\n        </div>\r\n      </div>\r\n      <div className=\"food_posts\">\r\n      <h1>FOOD POSTS...</h1>\r\n        <div className={classes.root}>\r\n          <GridList className={classes.gridList} cols={2.5}>\r\n            {allPosts.map((item) => {\r\n              if(item.catagory === 'food') {\r\n                return (\r\n                  <GridListTile key={item.image}>\r\n                    <img src={item.image} alt={item.title} />\r\n                    <GridListTileBar\r\n                      title={item.title}\r\n                      actionIcon={\r\n                        <IconButton aria-label={`star ${item.title}`}>\r\n                          <DeleteIcon onClick={() => handleDelete(item)} className={classes.title} />\r\n                          <EditIcon onClick={() => handleEdit(item)} className={classes.title} />\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                )\r\n              }\r\n            }\r\n            )}\r\n          </GridList>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"life_posts\">\r\n        <h1>LIFE POSTS...</h1>\r\n        <div className={classes.root}>\r\n          <GridList className={classes.gridList} cols={2.5}>\r\n            {allPosts.map((item) => {\r\n              if(item.catagory === 'life') {\r\n                return (\r\n                  <GridListTile key={item.image}>\r\n                    <img src={item.image} alt={item.title} />\r\n                    <GridListTileBar\r\n                      title={item.title}\r\n                      actionIcon={\r\n                        <IconButton aria-label={`star ${item.title}`}>\r\n                          <DeleteIcon onClick={() => handleDelete(item)} className={classes.title} />\r\n                          <EditIcon onClick={() => handleEdit(item)} className={classes.title} />\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                )\r\n              }\r\n            }\r\n            )}\r\n          </GridList>\r\n        </div>\r\n      </div>\r\n      <div className=\"life_posts\">\r\n        <h1>B&S POSTS...</h1>\r\n        <div className={classes.root}>\r\n          <GridList className={classes.gridList} cols={2.5}>\r\n            {allPosts.map((item) => {\r\n              if(item.catagory === 'body and soul') {\r\n                return (\r\n                  <GridListTile key={item.image}>\r\n                    <img src={item.image} alt={item.title} />\r\n                    <GridListTileBar\r\n                      title={item.title}\r\n                      actionIcon={\r\n                        <IconButton aria-label={`star ${item.title}`}>\r\n                          <DeleteIcon onClick={() => handleDelete(item)} className={classes.title} />\r\n                          <EditIcon onClick={() => handleEdit(item)} className={classes.title} />\r\n                        </IconButton>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                )\r\n              }\r\n            }\r\n            )}\r\n          </GridList>\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n  )\r\n}","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\admin\\AdminMenu.jsx",["62"],"import React, { useState } from 'react'\r\nimport firebaseApp from '../../firebase'\r\nimport { Button, Tooltip } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nexport const AdminMenu = ({ setShowCreatePost, showCreatePost, showPosts, setShowPosts }) => {\r\n\r\n  return (\r\n    <div>\r\n      <Tooltip title=\"Log Out/Log In\">\r\n        <Button variant=\"secondary\" onClick={()=> firebaseApp.auth().signOut()}>\r\n          <VpnKeyIcon />\r\n        </Button>\r\n      </Tooltip>\r\n      <Tooltip title=\"Show/Minimize Compose Post\">\r\n        <Button variant=\"secondary\" onClick={() => setShowCreatePost(!showCreatePost)}>\r\n          <AddIcon />\r\n        </Button>\r\n      </Tooltip>\r\n      <Tooltip title=\"Show/Minimize All Posts\">\r\n        <Button variant=\"secondary\" onClick={() => setShowPosts(!showPosts)}>\r\n          <VisibilityIcon />\r\n        </Button>\r\n      </Tooltip>\r\n    </div>\r\n  )\r\n}","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\LatestPosts.jsx",["63","64"],"import React, { useEffect } from 'react';\r\nimport '../styles/latestPosts.css';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nexport const LatestPosts = ({posts}) => {\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n\r\n    var userFeed = new window.Instafeed({\r\n      get: 'user',\r\n      target: \"instagram-output\",\r\n      limit: 4,\r\n        resolution: 'low_resolution',\r\n        accessToken: 'IGQVJVUTFsZAE9xVFo3dnlIRVVlSWg1OGo2cVVENWNOMVBEY25xTDY5TUc1cG5TQVh5cllKd3dta1M4RnROREU1ZAFBmb0JCazM5Q2d0cUdJbEJsX3dBODhaczYwZA2w1emlFSGJGWndkVTFhRk9JaHpqRgZDZD'\r\n    });\r\n\r\n    setTimeout(()=>{\r\n      userFeed._options.template = '<a href=\"{{link}}\"><img title=\"{{caption}}\" src=\"{{image}}\" /></a>';\r\n      userFeed.run();\r\n    }, 0);\r\n  \r\n    return (\r\n      <div className=\"latest-posts\">\r\n        <div className=\"latest_posts_wrapper\">\r\n          <div className=\"latest_header\">\r\n            <h3>פוסטים אחרונים</h3>\r\n            <hr/>\r\n          </div>\r\n          <div className=\"latest_posts_posts\">\r\n            {posts && \r\n              posts.map((post, i) => {\r\n                while(i < 3) {\r\n                  return (\r\n                    <Card id=\"card\" className={`${classes.root}`} key={post.id}>\r\n                      <CardActionArea>\r\n                        <CardMedia\r\n                          id=\"image\"\r\n                          className={classes.media}\r\n                          image={post.image}\r\n                          title=\"Contemplative Reptile\"\r\n                        />\r\n                        <CardContent className=\"card_content\">\r\n                          <Typography id=\"typo\" gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {post.title}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {truncate(post.description, 30)}\r\n                          </Typography>\r\n                          <ArrowBackIosIcon id=\"arrow\"/>\r\n                        </CardContent>\r\n                      </CardActionArea>\r\n                      <CardActions>\r\n                      </CardActions>\r\n                    </Card>\r\n                  )\r\n                }\r\n              })\r\n            }\r\n          </div>\r\n          <div className=\"instagram_feed\">\r\n            <h1>עקבו אחריי</h1>\r\n            <span>@limorsror</span>\r\n            <div id=\"instagram-output\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\Posts.jsx",["65"],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\components\\admin\\PostContentForm.jsx",["66"],"import React, { useState, useEffect } from 'react';\r\nimport '../../styles/postContentForm.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getPostsAction, createPostAction, setPostAction } from '../../store/actions/posts.actions';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { storage } from '../../firebase';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl\r\n} from '@material-ui/core'\r\n\r\nexport const PostContentForm = ({ editPost, setEditPost }) => {\r\n  const [ image, setImage ] = useState(null);\r\n  const [ value, setValue ] = useState('');\r\n  const [ editValue, setEditValue ] = useState('');\r\n  const [ readyToPost, setReadyToPost ] = useState(false)\r\n  const [ newPost, setNewPost ] = useState({\r\n    imageURL: '',\r\n    catagory: '',\r\n    title: '',\r\n    description: '',\r\n    content: value\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    setEditValue(editPost.content)\r\n  }, [editPost])\r\n\r\n  useEffect(() => {\r\n    dispatch(getPostsAction())\r\n  },[])  \r\n\r\n  const QuillModules = {\r\n    toolbar: [\r\n      [{ 'header': [1, 2, false] }],\r\n      ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n      [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n      ['link', 'image', 'video'],\r\n      ['clean'],\r\n      [{ 'direction': 'rtl' }],\r\n      ['image', 'code-block'],\r\n      ['align'],\r\n      [{'color': [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\", 'custom-color']}]\r\n\r\n    ],\r\n  }\r\n  const formats = [\r\n    'header',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link', 'image', 'color', 'code-block', 'image','clean', 'direction', 'align','video'\r\n  ]\r\n  \r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(editPost.title.length === 0) {\r\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n      uploadTask.on(\r\n        'state_changed', (snapshot) => {\r\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          console.log('Upload is ' + progress + '% done');\r\n        }, (error) => {\r\n          console.log(error)\r\n        },\r\n        () => {\r\n          uploadTask.snapshot.ref.getDownloadURL().then((url) => {\r\n            let uploadedPost = Object.assign(newPost, {imageURL:url})\r\n            setNewPost(uploadedPost);\r\n            dispatch(createPostAction(uploadedPost))\r\n            console.log('File available at','image const', url);\r\n            resetInputs();\r\n            setValue('')\r\n            setReadyToPost(false)\r\n          })\r\n        }\r\n      )\r\n    } else {\r\n      dispatch(setPostAction(editPost))\r\n      resetInputs();\r\n      setEditPost('')\r\n      setReadyToPost(false)\r\n    }\r\n  }\r\n\r\n  const resetInputs = () => {\r\n    setNewPost({\r\n      imageURL: '',\r\n      catagory: '',\r\n      title: '',\r\n      description: '',\r\n      content: ''\r\n    })\r\n    setEditPost({\r\n      id: '',\r\n      imageURL: '',\r\n      catagory: '',\r\n      title: '',\r\n      description: '',\r\n      content: ''\r\n    })\r\n    setImage(null)\r\n  }\r\n\r\n  const saveEditorContent = () => {\r\n    if(editPost.title.length === 0) {\r\n      setNewPost({\r\n        ...newPost,\r\n        content: value\r\n      })\r\n      setReadyToPost(true)\r\n    } else {\r\n      setEditPost({\r\n        ...editPost,\r\n        content: editValue\r\n      })\r\n      setReadyToPost(true)\r\n    }\r\n  }\r\n    \r\n  return (\r\n    <div className=\"form-container\">\r\n        <FormControl required className=\"post-form\">\r\n          <InputLabel htmlFor=\"atagory-select\">CATAGORY</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"catagory-select\"\r\n              name=\"catagory\"\r\n              value={editPost.catagory ? editPost.catagory : newPost.catagory}\r\n              onChange={(e) => {setNewPost({...newPost, catagory: e.target.value})}}\r\n              >\r\n              <MenuItem value='beauty'>BEAUTY</MenuItem>\r\n              <MenuItem value='body and soul'>BODY & SOUL</MenuItem>\r\n              <MenuItem value='food'>FOOD</MenuItem>\r\n              <MenuItem value='life'>LIFE</MenuItem>\r\n            </Select>\r\n            <TextField\r\n              className=\"input\"\r\n              required\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"title\"\r\n              label=\"POST TITLE\"\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={editPost.title ? editPost.title : newPost.title}\r\n              onChange={editPost.title ? (e) => setEditPost({...editPost, title: e.target.value}) :(e) => setNewPost({...newPost, title: e.target.value })}\r\n            />\r\n            <TextField\r\n              className=\"input\"\r\n              required\r\n              variant=\"outlined\"\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"description\"\r\n              label=\"DESCRIPTION\"\r\n              type=\"text\"\r\n              fullWidth\r\n              value={editPost.description ? editPost.description : newPost.description}\r\n              onChange={editPost.description ? (e) => setEditPost({...editPost, description: e.target.value}) : (e) => setNewPost({...newPost, description: e.target.value })}\r\n            />\r\n            <TextField\r\n              required\r\n              className=\"input\"\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"image\"\r\n              label=\"image\"\r\n              type=\"file\"\r\n              fullWidth\r\n              onChange={(e) => setImage(e.target.files[0])}\r\n            />\r\n            <ReactQuill className=\"editor-quill\" modules={QuillModules} formats={formats} placeholder=\"התחילי לכתוב...\"  theme=\"snow\" onChange={editPost.content ? setEditValue : setValue} value={editPost.content ? editValue : value} style={{height:\"400px\"}} />\r\n            <div className=\"btns-group\">\r\n              <Button className=\"btn\" variant=\"contained\" color=\"secondary\" onClick={saveEditorContent}>Save</Button>\r\n              <Button className=\"btn\" onClick={handleSubmit} variant=\"contained\" color=\"secondary\" type=\"submit\" disabled={!readyToPost}>\r\n                {`${editPost.title ? \"Submit Changes\" : \"Submit Post\"}`}\r\n              </Button>\r\n              <Button className=\"btn\" variant=\"contained\" color=\"secondary\" onClick={resetInputs}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n        </FormControl>\r\n    </div>\r\n  )\r\n}","C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\actions\\posts.actions.js",[],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\selectors\\index.js",[],"C:\\Users\\avire\\Desktop\\LimorBlogProject\\virtues_frontend\\virtues_frontend\\src\\store\\actions\\actions.types.js",[],{"ruleId":"67","severity":1,"message":"68","line":65,"column":66,"nodeType":"69","endLine":65,"endColumn":81},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":91,"column":34,"nodeType":"76","messageId":"77","endLine":91,"endColumn":36},{"ruleId":"74","severity":1,"message":"75","line":117,"column":34,"nodeType":"76","messageId":"77","endLine":117,"endColumn":36},{"ruleId":"74","severity":1,"message":"75","line":144,"column":34,"nodeType":"76","messageId":"77","endLine":144,"endColumn":36},{"ruleId":"74","severity":1,"message":"75","line":170,"column":34,"nodeType":"76","messageId":"77","endLine":170,"endColumn":36},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"82","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"75","line":54,"column":35,"nodeType":"76","messageId":"77","endLine":54,"endColumn":37},{"ruleId":"83","severity":1,"message":"84","line":17,"column":6,"nodeType":"85","endLine":17,"endColumn":8,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"84","line":38,"column":5,"nodeType":"85","endLine":38,"endColumn":7,"suggestions":"87"},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["90"],["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"92","fix":"94"},"Update the dependencies array to be: [dispatch]",{"range":"95","text":"96"},{"range":"97","text":"96"},[647,649],"[dispatch]",[1080,1082]]